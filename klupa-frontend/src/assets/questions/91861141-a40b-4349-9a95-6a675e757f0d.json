[{"question":"How does quality control differ from quality assurance?","answer":"* Quality control is a product-oriented approach of running a program to determine if it has any defects, as well as to make sure that the software meets all of the requirements put forth by the stakeholders.\r\n* Quality assurance is a process-oriented approach that focuses on making sure that the methods, techniques, and processes used to create quality deliverables are applied correctly.","id":"b7868ef0-fe2b-47e4-b551-9db4745ca6be","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What is Software Testing?","answer":"Software Testing is a process used to identify developed software's correctness, completeness, and quality. It includes a series of activities conducted to find software errors so that it can be corrected before the product is released to the market.","id":"8475ed82-2bac-4b57-aee8-e5ff49669680","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"Why is Software Testing Required?","answer":"Software testing is a mandatory process that guarantees that the software product is safe and good enough to be released to the market.","id":"7d6f3583-5aac-4872-a5d4-5b52a594f90d","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What are the two main categories of software testing?","answer":"Software testing is a huge domain but it can be broadly categorized into two areas such as :\r\n\r\nManual Testing - This is the oldest type of software testing where the testers manually execute test cases without using any test automation tools. It means the software application is tested manually by QA testers.\r\nAutomation Testing - This is the process of using the assistance of tools, scripts, and software to perform test cases by repeating pre-defined actions. Test Automation focuses on replacing manual human activity with systems or devices that enhance efficiency.","id":"78fed53a-8560-4acf-a9bd-71b153f0b7cd","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What different types of manual testing are there?","answer":"Different types of manual testing are;\r\n\r\nBlack Box Testing\r\nWhite Box Testing\r\nUnit Testing\r\nSystem Testing\r\nIntegration Testing\r\nAcceptance Testing","id":"8c7b5ad7-764a-448f-b5af-c06b7fe2c12c","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What are the different levels of manual testing?","answer":"Four levels of manual testing are:\r\n\r\nUnit testing - It is a way of testing the smallest piece of code referred to as a unit that can be logically isolated in a system. It is mainly focused on the functional correctness of the standalone module.\r\nIntegration Testing - It is a level of software testing where individual units are combined and tested to verify if they are working as they intend to when integrated. The main aim here is to test the interface between the modules.\r\nSystem Testing - In system testing all the components of the software are tested as a whole in order to ensure that the overall product meets the requirements specified. There are dozens of types of system testing, including usability testing, regression testing, and functional testing.\r\nUser Acceptance Testing - The final level, acceptance testing, or UAT (user acceptance testing), determines whether or not the software is ready to be released.","id":"62d833a4-6408-4829-b07a-8c07a5c3549e","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"Explain the procedure for manual testing?","answer":"The manual testing process comprises the following steps:\r\n\r\nPlanning and Control\r\nAnalysis and Design\r\nImplementation and Execution\r\nEvaluating exit criteria and Reporting\r\nTest Closure activities","id":"d6bbd3dd-16aa-4ce4-a8eb-ba9a2cf8420b","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What is the test case?","answer":"A test case is a document that has a set of conditions or actions that are performed on the software application in order to verify the expected functionality of the feature.\r\n\r\nTest cases describe a specific idea that is to be tested, without detailing the exact steps to be taken or data to be used. For example, in a test case, you document something like 'Test if coupons can be applied on actual price'.","id":"010b41d5-a713-4368-abd7-7290af8ad43b","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What is API testing?","answer":"API testing is a type of software testing where application programming interfaces (APIs) are tested to determine if they meet expectations for functionality, reliability, performance, and security. In simple terms, API testing is intended to reveal bugs, inconsistencies or deviations from the expected behavior of an API.","id":"a54a3976-70ab-42cb-8b4f-c4308ac9117e","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What's the difference between verification and validation in testing?","answer":"* Verification: It is a static analysis technique. Here, testing is done without executing the code. Examples include - Reviews, Inspection, and walkthrough.\r\n* Validation: It is a dynamic analysis technique where testing is done by executing the code. Examples include functional and non-functional testing techniques.","id":"5798ec8a-be6a-408b-aa39-2d4504e06eca","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What's the difference between a bug and a defect?","answer":"A bug is a just fault in the software that's detected during testing time. A defect is a variance between expected results and actual results, detected by the developer after the product goes live.","id":"82bdfa31-e21d-4b73-92b7-4aab7d6ae5af","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What are the advantages of manual testing?","answer":"Merits of manual testing are:\r\n\r\nIt is a cheaper way of testing when compared to automated testing\r\nAnalysis of product from the point of view of the end-user is possible only with manual testing\r\nGUI testing can be done more accurately with the help of manual testing as visual accessibility and preferences are difficult to automate\r\nEast to learn for new people who have just entered into testing\r\nIt is highly suitable for short-term projects when test-scripts are not going to be repeated and reused for thousands of times\r\nBest suited when the project is at the early stages of its development\r\nHighly reliable, since automated tests can contain errors and missed bugs","id":"04b7c4f2-77cf-4229-a005-3a57c0e91aab","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What's the role of documentation in Manual Testing?","answer":"Documentation plays a critical role in achieving effective software testing. Details like requirement specifications, designs, business rules, inspection reports, configurations, code changes, test plans, test cases, bug reports, user manuals, etc. should all be documented.\r\n\r\nDocumenting the test cases will facilitate you to estimate the testing effort you will need along with test coverage and tracking and tracing requirement. Some commonly applied documentation artifacts associated with software testing are:\r\nTest Plan\r\nTest Scenario\r\nTest Case\r\nTraceability Matrix","id":"1584225a-bf73-4a75-87f2-c8ab9903c5a3","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What are the phases involved in Software Testing Life Cycle?","answer":"Requirement Analysis: QA team understands the requirement in terms of what we will testing & figure out the testable requirements.\r\nTest Planning: In this phase, the test strategy is defined. Objective & the scope of the project is determined.\r\nTest Case Development: Here, detailed test cases are defined and developed. The testing team also prepares the test data for testing.\r\nTest Environment Setup: It is a setup of software and hardware for the testing teams to execute test cases.\r\nTest Execution: It is the process of executing the code and comparing the expected and actual results.\r\nTest Cycle Closure: It involves calling out the testing team member meeting & evaluating cycle completion criteria based on test coverage, quality, cost, time, critical business objectives, and software.","id":"38b4c14b-4a94-4297-819a-790a321f5fe7","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"Explain the defect life cycle.","answer":"A defect life cycle is a process in which a defect goes through various phases during its whole lifetime. The cycle starts when a defect is found and ends when a defect is closed, after ensuring it's not reproduced. Bug or defect life cycle includes the steps as shown in the below figure.","id":"b692b012-2d19-4266-add1-94100ea9cade","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"Define what is a critical bug.","answer":"A critical bug is a bug that has got the tendency to affect a majority of the functionality of the given application. It means a large piece of functionality or major system component is completely broken and there is no workaround to move further. Application cannot be distributed to the end client unless the critical bug is addressed.","id":"9ce9cae1-c5f7-4cf6-b590-b0b646ecbf7f","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What is the pesticide paradox? How to overcome it?","answer":"According to pesticide paradox, if the same tests are repeated over and over again, eventually the same test cases will no longer find new bugs. Developers will be extra careful in those places where testers found more defects and might not look into other areas. Methods to prevent pesticide paradox:\r\n\r\n To write a whole new set of test cases to exercise different parts of the software.\r\n To prepare new test cases and add them to the existing test cases.\r\nUsing these methods, it's possible to find more defects in the area where defect numbers dropped.","id":"60754c45-6976-44a4-881b-170f41320170","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What is Defect Cascading in Software Testing?","answer":"Defect Cascading is the process of triggering other defects in the application. When a defect goes unnoticed while testing, it invokes other defects. As a result, multiple defects crop up in the later stages of development. If defect cascading continues to affect other features in the application, identifying the affected feature becomes challenging. You may make different test cases to solve this issue, even then it is difficult and time-consuming.","id":"f5c3b68a-5aae-4839-ad40-7759439a67f1","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What is black box testing, and what are the various techniques?","answer":"Black-Box Testing, also known as specification-based testing, analyses the functionality of a software/application without knowing much about the internal structure/design of the item. The purpose of this testing is to check the system's functionality as a whole to ensure that it works correctly and meets user demands. Various black-box testing techniques are:\r\n\r\nEquivalence Partitioning\r\nBoundary Value Analysis\r\nDecision Table Based Technique\r\nCause-effect Graphing\r\nUse Case Testing","id":"f509646a-4cdd-42ff-9a89-8e9aec2e3414","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What is white box testing, and what are the various techniques?","answer":"White-Box Testing also known as structure-based testing, requires a profound knowledge of the code as it includes testing of some structural part of the application. The purpose of this testing is to enhance security, check the flow of inputs/outputs through application and to improve design and usability. Various white-box testing techniques are:\r\n\r\nStatement Coverage\r\nDecision Coverage\r\nCondition Coverage\r\nMultiple Condition Coverage","id":"1876ff13-840e-4a98-8cbd-dfd4bb896ee9","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What are the Experience-based testing techniques?","answer":"Experienced-based testing is all about discovery, investigation, and learning. The tester constantly studies and analyzes the product and accordingly applies his skills, traits, and experience to develop test strategies and test cases to perform necessary testing. Various experience-based testing techniques are:\r\n\r\nExploratory Testing\r\nError Guessing","id":"25f8fda7-9b4f-4caa-aba4-35025a5e3084","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"How will you determine when to stop testing?","answer":"Deciding when to stop testing can be quite difficult. Many modern software applications are so complex and run in such an interdependent environment, that complete testing can never be done. Some common factors in deciding when to stop testing are: \r\n\r\nDeadlines (release deadlines, testing deadlines, etc.)\r\nTest cases completed with certain percentage passed\r\nWhen the test budget is depleted\r\nCoverage of code or functionality or requirements reaches a specified point\r\nBug rate falls below a certain level\r\nWhen Beta or alpha testing period ends","id":"7a002c69-b4f4-41c6-a07c-4e2e6218335e","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What if the software is so buggy it can't really be tested at all? ","answer":"Often testers encounter a bug that can't be resolved at all. In such situations, the best bet is for testers to go through the process of reporting whatever bugs or blocking-type problems initially show up, with the focus being on critical bugs. Since this type of problem can cause severe problems such as insufficient unit testing or insufficient integration testing, poor design, improper build or release procedures, etc managers should be notified and provided with some documentation as evidence of the problem.","id":"5817939b-4afb-424d-b8e0-3aeda9fef4bc","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"How you test a product if the requirements are yet to freeze?","answer":"It's possible that a requirement stack is not available for a piece of product. It might take serious effort to determine if an application has significant unexpected functionality, and it would indicate deeper problems in the software development process. If the functionality isn't necessary to the purpose of the application, it should be removed. Else, create a test plan based on the assumptions made about the product. But make sure you get all assumptions well documented in the test plan","id":"0b800fbc-6308-4772-ae92-7fa87cd6e763","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"How do you know the code has met specifications? ","answer":"'Good code' is code that works, that is bug-free, and is readable and maintainable. Most organizations have coding 'standards' that all developers are supposed to adhere to, but everyone has different ideas about what's best, or what is too many or too few rules. There are a lot of tools like traceability matrix which ensures the requirements are mapped to the test cases. And when the execution of all test cases finishes with success, it indicates that the code has met the requirement.","id":"d37d5deb-91e4-4bb0-b526-b17a3116e805","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What are the cases when you'll consider to choose automated testing over manual testing?","answer":"Automated testing can be considered over manual testing during the following situations:\r\n\r\nWhen tests require periodic execution\r\nTests include repetitive steps\r\nTests need to be executed in a standard runtime environment\r\nWhen you have less time to complete the testing phase\r\nWhen there is a lot of code that needs to be repeatedly tested\r\nReports are required for every execution","id":"d36c9a5e-41a4-4006-b87d-88630195b197","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"What is 'configuration management'?","answer":"Every high-functioning organization has a 'master plan' that details how they are supposed to operate and accomplish tasks. Software development and testing are no different. Software configuration management (SCM) is a set of processes, policies, and tools that organize, control, coordinate, and track:\r\n\r\ncode\r\ndocumentation\r\nproblems\r\nchange requests\r\ndesigns and tools\r\ncompilers and libraries","id":"9a1d2d39-07b4-477a-90c4-cbbdafa4f78f","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"Why is it impossible to test a program thoroughly or 100% bug-free?","answer":"It is impossible to build a software product that is 100% bug-free. You can just minimize the error, flaw, failure, or fault in a computer program or system that causes it to produce an incorrect or unexpected result.\r\n\r\nHere are the two principal reasons that make it impossible to test a program entirely.\r\n\r\nSoftware specifications can be subjective and can lead to different interpretations.\r\nA software program might require too many inputs, outputs, and path combinations to test.","id":"cb1e9685-32e6-4eea-8eb1-9ac8916f79bb","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"Can automation testing replace manual testing?","answer":"Automation testing isn't a replacement for manual testing. No matter how good automated tests are, you cannot automate everything. Manual tests play an important role in software development and come in handy whenever you have a case where you cannot use automation. Automated and manual testing each have their own strengths and weaknesses. Manual testing helps us understand the entire problem and more flexibly explore other angles of tests. On the other hand, automated testing helps save time in the long run by accomplishing a large number of surface-level tests in a short time.","id":"e3429840-52b7-4f78-88e7-6ed1f3a176ea","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"},{"question":"","id":"c04af1d9-e74c-4dc4-bfb9-f25ac96c8e09","categoryId":"91861141-a40b-4349-9a95-6a675e757f0d"}]